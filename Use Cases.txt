@pyod

============================================================================================
Input here: Run IForest on ./data/glass_train.mat and ./data/glass_test.mat with contamination=0.1

Agents:
=== [Main] Starting full process graph ===

=== [Preprocessor] Starting to process user input ===
Enter command (e.g., 'Run IForest on ./data/glass_train.mat and ./data/glass_test.mat with contamination=0.1'):
User: Run IForest on ./data/glass_train.mat and ./data/glass_test.mat with contamination=0.1

Experiment Configuration:
Algorithm: ['IForest']
Training Dataset: ./data/glass_train.mat
Testing Dataset: ./data/glass_test.mat
Parameters: {'contamination': 0.1}

=== [Preprocessor] User input processing complete ===

=== [Planner] Starting to generate idea space ===

=== [Planner] Idea space generation complete ===

=== [Instructor] Processing IForest (first execution) ===

=== Extracted Documentation ===

Returns
self : object
pyod.models.iforest module
IsolationForest Outlier Detector. Implemented on scikit-learn library.
class pyod.models.iforest.IForest(n_estimators=100, max_samples='auto', contamination=0.1, max_features=1.0, bootstrap=False, n_jobs=1, behaviour='old', random_state=None, verbose=0)[source]
Bases: BaseDetector
Wrapper of scikit-learn Isolation Forest with more functionalities.
The IsolationForest ‘isolates’ observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature. See [BLTZ08, BLTZ12] for details.

Returns
self : object
pyod.models.dif module
Deep Isolation Forest for Anomaly Detection (DIF)
class pyod.models.dif.DIF(batch_size=1000, representation_dim=20, hidden_neurons=None, hidden_activation='tanh', skip_connection=False, n_ensemble=50, n_estimators=6, max_samples=256, contamination=0.1, random_state=None, device=None)[source]
Bases: BaseDetector
Deep Isolation Forest (DIF) is an extension of iForest. It uses deep representation ensemble to achieve non-linear isolation on original data space. See [BXPWW23] for details.
Parameters
batch_sizeint, optional (default=1000)
Number of samples per gradient update.
representation_dim, int, optional (default=20)

Base unsupervised outlier detectors from PyOD. (Note: requires fit and decision_function methods)
local_region_sizeint, optional (default=30)
Number of training points to consider in each iteration of the local region generation process (30 by default).
local_max_featuresfloat in (0.5, 1.), optional (default=1.0)
Maximum proportion of number of features to consider when defining the local region (1.0 by default).
n_binsint, optional (default=10)
Number of bins to use when selecting the local region
random_stateRandomState, optional (default=None)
A random number generator instance to define the state of the random permutations generator.

=== Coding Output ===

X.shape: (171, 9)
y.shape: (171, 1)
X.shape: (43, 9)
y.shape: (43, 1)
AUROC: 0.72
AUPRC: 0.20
Failed prediction at point [1.52739, 11.02, 0.0, 0.75, 73.08, 0.0, 14.96, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51115, 17.38, 0.0, 0.34, 75.41, 0.0, 6.65, 0.0, 0.0] with true label 1.0
Failed prediction at point [1.51316, 13.02, 0.0, 3.04, 70.48, 6.21, 6.96, 0.0, 0.0] with true label 0.0



=== [Reviewer] Reviewing code for IForest ===

=== [Main] Full process graph completed ===
[IForest] Success, AUROC: 0.7200, AUPRC: 0.2000, Error Points: [{'point': [1.52739, 11.02, 0.0, 0.75, 73.08, 0.0, 14.96, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51115, 17.38, 0.0, 0.34, 75.41, 0.0, 6.65, 0.0, 0.0], 'true_label': 1.0}, {'point': [1.51316, 13.02, 0.0, 3.04, 70.48, 6.21, 6.96, 0.0, 0.0], 'true_label': 0.0}]
============================================================================================

@pygod

Users: Hey AI, lets try Dominant on ./data/inj_cora_train.pt and ./data/inj_cora_test.pt with hidden_channels=64


Agents:
michaelx@MichaelXs-MBP OpenAD % python3 /Users/michaelx/OpenAD/main.py

=== [Main] Starting full process graph ===

=== [Preprocessor] Starting to process user input ===
Enter command (e.g., 'Run IForest on ./data/glass_train.mat and ./data/glass_test.mat with contamination=0.1'):
User: Hey AI, can you try DOMINANT on  ./data/inj_cora_train.pt and ./data/inj_cora_test.pt

Experiment Configuration:
Algorithm: ['DOMINANT']
Training Dataset: ./data/inj_cora_train.pt
Testing Dataset: ./data/inj_cora_test.pt
Parameters: {}

=== [Preprocessor] User input processing complete ===

=== [Planner] Starting to generate idea space ===

=== [Planner] Idea space generation complete ===

=== [Instructor] Processing DOMINANT (first execution) ===

=== Extracted Documentation ===

Bases: DeepDetector
Deep Anomaly Detection on Attributed Networks
DOMINANT is an anomaly detector consisting of a shared graph convolutional encoder, a structure reconstruction decoder, and an attribute reconstruction decoder. The reconstruction mean squared error of the decoders are defined as structure anomaly score and attribute anomaly score, respectively.
See [DLBL19] for details.
Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.
num_layers (int, optional) – Total number of layers in model. A half (floor) of the layers are for the encoder, the other half (ceil) of the layers are for decoders. Default: 4.
dropout (float, optional) – Dropout rate. Default: 0..

. Only available when return_prob=True.
conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.
DOMINANT
class pygod.detector.DOMINANT(hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, sigmoid_s=False, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, weight=0.5, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector
Deep Anomaly Detection on Attributed Networks

AdONE
class pygod.detector.AdONE(hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=None, w1=0.2, w2=0.2, w3=0.2, w4=0.2, w5=0.2, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, save_emb=False, compile_model=False, verbose=0, **kwargs)[source]
Bases: DeepDetector
Adversarial Outlier Aware Attributed Network Embedding

=== Coding Output ===

AUROC: 0.7417
AUPRC: 0.1442

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/torch_geometric/typing.py:113: UserWarning: An issue occurred while importing 'torch-spline-conv'. Disabling its usage. Stacktrace: dlopen(/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/torch_spline_conv/_basis_cpu.so, 0x0006): Symbol not found: __ZN2at23SavedTensorDefaultHooks11set_tracingEb
  Referenced from: <FD570FCE-4219-351E-84B0-6A9755646877> /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/torch_spline_conv/_basis_cpu.so
  Expected in:     <552B36CA-07A6-332B-BF7F-6D22D9005F71> /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/torch/lib/libtorch_cpu.dylib
  warnings.warn(


=== [Reviewer] Reviewing code for DOMINANT ===

=== [Main] Full process graph completed ===
[DOMINANT] Success, AUROC: 0.7417, AUPRC: 0.1442, Error Points: []







============================================================================================
Input here: run all on ./data/glass_train.mat and ./data/glass_test.mat

=== [Main] Starting full process graph ===

=== [Preprocessor] Starting to process user input ===
Enter command (e.g., 'Run IForest on ./data/glass_train.mat and ./data/glass_test.mat with contamination=0.1'):
User: run all on ./data/glass_train.mat and ./data/glass_test.mat

Experiment Configuration:
Algorithm: ['all']
Training Dataset: ./data/glass_train.mat
Testing Dataset: ./data/glass_test.mat
Parameters: {}

=== [Preprocessor] User input processing complete ===

=== [Planner] Starting to generate idea space ===

=== [Planner] Idea space generation complete ===

=== [Instructor] Processing ECOD (first execution) ===

=== Extracted Documentation ===

class pyod.models.ecod.ECOD(contamination=0.1, n_jobs=1)[source]
Bases: BaseDetector
ECOD class for Unsupervised Outlier Detection Using Empirical Cumulative Distribution Functions (ECOD) ECOD is a parameter-free, highly interpretable outlier detection algorithm based on empirical CDF functions. See [BLZH+22] for details.
Parameters
contaminationfloat in (0., 0.5), optional (default=0.1)
The amount of contamination of the data set, i.e. the proportion of outliers in the data set. Used when fitting to define the threshold on the decision function.
n_jobsoptional (default=1)

pyod.models.copod module
Copula Based Outlier Detector (COPOD)
class pyod.models.copod.COPOD(contamination=0.1, n_jobs=1)[source]
Bases: BaseDetector
COPOD class for Copula Based Outlier Detector. COPOD is a parameter-free, highly interpretable outlier detection algorithm based on empirical copula models. See [BLZB+20] for details.
Parameters
contaminationfloat in (0., 0.5), optional (default=0.1)
The amount of contamination of the data set, i.e. the proportion of outliers in the data set. Used when fitting to define the threshold on the decision function.
n_jobsoptional (default=1)

Returns
self : object
pyod.models.auto_encoder module
Using AutoEncoder with Outlier Detection
class pyod.models.auto_encoder.AutoEncoder(contamination=0.1, preprocessing=True, lr=0.001, epoch_num=10, batch_size=32, optimizer_name='adam', device=None, random_state=42, use_compile=False, compile_mode='default', verbose=1, optimizer_params: dict = {'weight_decay': 1e-05}, hidden_neuron_list=[64, 32], hidden_activation_name='relu', batch_norm=True, dropout_rate=0.2)[source]
Bases: BaseDeepLearningDetector

=== Coding Output ===

X.shape: (171, 9)
y.shape: (171, 1)
X.shape: (43, 9)
y.shape: (43, 1)
AUROC: 0.62
AUPRC: 0.40
Failed prediction at point [1.52739, 11.02, 0.0, 0.75, 73.08, 0.0, 14.96, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51916, 14.15, 0.0, 2.09, 72.74, 0.0, 10.88, 0.0, 0.0] with true label 1.0
Failed prediction at point [1.51829, 14.46, 2.24, 1.62, 72.38, 0.0, 9.26, 0.0, 0.0] with true label 1.0
Failed prediction at point [1.51316, 13.02, 0.0, 3.04, 70.48, 6.21, 6.96, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51508, 15.15, 0.0, 2.25, 73.5, 0.0, 8.34, 0.63, 0.0] with true label 0.0



=== [Reviewer] Reviewing code for ECOD ===

=== [Instructor] Processing SOD (first execution) ===

=== Extracted Documentation ===

Subspace Outlier Detection (SOD)
class pyod.models.sod.SOD(contamination=0.1, n_neighbors=20, ref_set=10, alpha=0.8)[source]
Bases: BaseDetector
Subspace outlier detection (SOD) schema aims to detect outlier in varying subspaces of a high dimensional feature space. For each data object, SOD explores the axis-parallel subspace spanned by the data object’s neighbors and determines how much the object deviates from the neighbors in this subspace.
See [BKKrogerSZ09] for details.
Parameters
n_neighborsint, optional (default=20)
Number of neighbors to use by default for k neighbors queries.
ref_set: int, optional (default=10)

All Models
pyod.models.abod module
Angle-based Outlier Detector (ABOD)
class pyod.models.abod.ABOD(contamination=0.1, n_neighbors=5, method='fast')[source]
Bases: BaseDetector
ABOD class for Angle-base Outlier Detection. For an observation, the variance of its weighted cosine scores to all neighbors could be viewed as the outlying score. See [BKZ+08] for details.
Two version of ABOD are supported:
Fast ABOD: use k nearest neighbors to approximate.
Original ABOD: consider all training points with high time complexity at O(n^3).
Parameters
contaminationfloat in (0., 0.5), optional (default=0.1)

pyod.models.copod module
Copula Based Outlier Detector (COPOD)
class pyod.models.copod.COPOD(contamination=0.1, n_jobs=1)[source]
Bases: BaseDetector
COPOD class for Copula Based Outlier Detector. COPOD is a parameter-free, highly interpretable outlier detection algorithm based on empirical copula models. See [BLZB+20] for details.
Parameters
contaminationfloat in (0., 0.5), optional (default=0.1)
The amount of contamination of the data set, i.e. the proportion of outliers in the data set. Used when fitting to define the threshold on the decision function.
n_jobsoptional (default=1)

=== Coding Output ===

X.shape: (171, 9)
y.shape: (171, 1)
X.shape: (43, 9)
y.shape: (43, 1)
AUROC: 0.88
AUPRC: 0.37
Failed prediction at point [1.52739, 11.02, 0.0, 0.75, 73.08, 0.0, 14.96, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51916, 14.15, 0.0, 2.09, 72.74, 0.0, 10.88, 0.0, 0.0] with true label 1.0
Failed prediction at point [1.52369, 13.44, 0.0, 1.58, 72.22, 0.32, 12.24, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51613, 13.88, 1.78, 1.79, 73.1, 0.0, 8.67, 0.76, 0.0] with true label 0.0
Failed prediction at point [1.51623, 14.14, 0.0, 2.88, 72.61, 0.08, 9.18, 1.06, 0.0] with true label 0.0
Failed prediction at point [1.52065, 14.36, 0.0, 2.02, 73.42, 0.0, 8.44, 1.64, 0.0] with true label 0.0
Failed prediction at point [1.51658, 14.8, 0.0, 1.99, 73.11, 0.0, 8.28, 1.71, 0.0] with true label 0.0
Failed prediction at point [1.51316, 13.02, 0.0, 3.04, 70.48, 6.21, 6.96, 0.0, 0.0] with true label 0.0



=== [Reviewer] Reviewing code for SOD ===

=== [Instructor] Processing ROD (first execution) ===

=== Extracted Documentation ===

Rotation-based Outlier Detection (ROD), is a robust and parameter-free algorithm that requires no statistical distribution assumptions and works intuitively in three-dimensional space, where the 3D-vectors, representing the data points, are rotated about the geometric median two times counterclockwise using Rodrigues rotation formula. The results of the rotation are parallelepipeds where their volumes are mathematically analyzed as cost functions and used to calculate the Median Absolute Deviations to obtain the outlying score. For high dimensions > 3, the overall score is calculated by taking the average of the overall 3D-subspaces scores, that were resulted from decomposing the original data space. See [BABC20] for details.

pyod.models.copod module
Copula Based Outlier Detector (COPOD)
class pyod.models.copod.COPOD(contamination=0.1, n_jobs=1)[source]
Bases: BaseDetector
COPOD class for Copula Based Outlier Detector. COPOD is a parameter-free, highly interpretable outlier detection algorithm based on empirical copula models. See [BLZB+20] for details.
Parameters
contaminationfloat in (0., 0.5), optional (default=0.1)
The amount of contamination of the data set, i.e. the proportion of outliers in the data set. Used when fitting to define the threshold on the decision function.
n_jobsoptional (default=1)

Subspace Outlier Detection (SOD)
class pyod.models.sod.SOD(contamination=0.1, n_neighbors=20, ref_set=10, alpha=0.8)[source]
Bases: BaseDetector
Subspace outlier detection (SOD) schema aims to detect outlier in varying subspaces of a high dimensional feature space. For each data object, SOD explores the axis-parallel subspace spanned by the data object’s neighbors and determines how much the object deviates from the neighbors in this subspace.
See [BKKrogerSZ09] for details.
Parameters
n_neighborsint, optional (default=20)
Number of neighbors to use by default for k neighbors queries.
ref_set: int, optional (default=10)

=== Coding Output ===

X.shape: (171, 9)
y.shape: (171, 1)
X.shape: (43, 9)
y.shape: (43, 1)
AUROC: 0.78
AUPRC: 0.30
Failed prediction at point [1.51755, 13.0, 3.6, 1.36, 72.99, 0.57, 8.4, 0.0, 0.11] with true label 0.0
Failed prediction at point [1.51727, 14.7, 0.0, 2.34, 73.28, 0.0, 8.95, 0.66, 0.0] with true label 0.0
Failed prediction at point [1.52152, 13.05, 3.65, 0.87, 72.22, 0.19, 9.85, 0.0, 0.17] with true label 0.0
Failed prediction at point [1.51602, 14.85, 0.0, 2.38, 73.28, 0.0, 8.76, 0.64, 0.09] with true label 0.0
Failed prediction at point [1.51708, 13.72, 3.68, 1.81, 72.06, 0.64, 7.88, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.52739, 11.02, 0.0, 0.75, 73.08, 0.0, 14.96, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51761, 12.81, 3.54, 1.23, 73.24, 0.58, 8.39, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51569, 13.24, 3.49, 1.47, 73.25, 0.38, 8.03, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.5159, 13.02, 3.58, 1.51, 73.12, 0.69, 7.96, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.5166, 12.99, 3.18, 1.23, 72.97, 0.58, 8.81, 0.0, 0.24] with true label 0.0
Failed prediction at point [1.52369, 13.44, 0.0, 1.58, 72.22, 0.32, 12.24, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51851, 13.2, 3.63, 1.07, 72.83, 0.57, 8.41, 0.09, 0.17] with true label 0.0
Failed prediction at point [1.51631, 13.34, 3.57, 1.57, 72.87, 0.61, 7.89, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51969, 12.64, 0.0, 1.65, 73.75, 0.38, 11.53, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51613, 13.88, 1.78, 1.79, 73.1, 0.0, 8.67, 0.76, 0.0] with true label 0.0
Failed prediction at point [1.51911, 13.9, 3.73, 1.18, 72.12, 0.06, 8.89, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.519, 13.49, 3.48, 1.35, 71.95, 0.55, 9.0, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51689, 12.67, 2.88, 1.71, 73.21, 0.73, 8.54, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51623, 14.14, 0.0, 2.88, 72.61, 0.08, 9.18, 1.06, 0.0] with true label 0.0
Failed prediction at point [1.52065, 14.36, 0.0, 2.02, 73.42, 0.0, 8.44, 1.64, 0.0] with true label 0.0
Failed prediction at point [1.51545, 14.14, 0.0, 2.68, 73.39, 0.08, 9.07, 0.61, 0.05] with true label 0.0
Failed prediction at point [1.5167, 13.24, 3.57, 1.38, 72.7, 0.56, 8.44, 0.0, 0.1] with true label 0.0
Failed prediction at point [1.5241, 13.83, 2.9, 1.17, 71.15, 0.08, 10.79, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51768, 12.65, 3.56, 1.3, 73.08, 0.61, 8.69, 0.0, 0.14] with true label 0.0
Failed prediction at point [1.51764, 12.98, 3.54, 1.21, 73.0, 0.65, 8.53, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.52119, 12.97, 0.33, 1.51, 73.39, 0.13, 11.27, 0.0, 0.28] with true label 0.0
Failed prediction at point [1.51784, 12.68, 3.67, 1.16, 73.11, 0.61, 8.7, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51769, 12.45, 2.71, 1.29, 73.7, 0.56, 9.06, 0.0, 0.24] with true label 0.0
Failed prediction at point [1.51674, 12.79, 3.52, 1.54, 73.36, 0.66, 7.9, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51776, 13.53, 3.41, 1.52, 72.04, 0.58, 8.79, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.5159, 13.24, 3.34, 1.47, 73.1, 0.39, 8.22, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.523, 13.31, 3.58, 0.82, 71.99, 0.12, 10.17, 0.0, 0.03] with true label 0.0
Failed prediction at point [1.51658, 14.8, 0.0, 1.99, 73.11, 0.0, 8.28, 1.71, 0.0] with true label 0.0
Failed prediction at point [1.51316, 13.02, 0.0, 3.04, 70.48, 6.21, 6.96, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51779, 13.64, 3.65, 0.65, 73.0, 0.06, 8.93, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51743, 12.2, 3.25, 1.16, 73.55, 0.62, 8.9, 0.0, 0.24] with true label 0.0
Failed prediction at point [1.51409, 14.25, 3.09, 2.08, 72.28, 1.1, 7.08, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.5173, 12.35, 2.72, 1.63, 72.87, 0.7, 9.23, 0.0, 0.0] with true label 0.0
Failed prediction at point [1.51508, 15.15, 0.0, 2.25, 73.5, 0.0, 8.34, 0.63, 0.0] with true label 0.0
Failed prediction at point [1.51905, 13.6, 3.62, 1.11, 72.64, 0.14, 8.76, 0.0, 0.0] with true label 0.0



=== [Reviewer] Reviewing code for ROD ===

=== [Main] Full process graph completed ===
[ECOD] Success, AUROC: 0.6200, AUPRC: 0.4000, Error Points: [{'point': [1.52739, 11.02, 0.0, 0.75, 73.08, 0.0, 14.96, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51916, 14.15, 0.0, 2.09, 72.74, 0.0, 10.88, 0.0, 0.0], 'true_label': 1.0}, {'point': [1.51829, 14.46, 2.24, 1.62, 72.38, 0.0, 9.26, 0.0, 0.0], 'true_label': 1.0}, {'point': [1.51316, 13.02, 0.0, 3.04, 70.48, 6.21, 6.96, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51508, 15.15, 0.0, 2.25, 73.5, 0.0, 8.34, 0.63, 0.0], 'true_label': 0.0}]
[SOD] Success, AUROC: 0.8800, AUPRC: 0.3700, Error Points: [{'point': [1.52739, 11.02, 0.0, 0.75, 73.08, 0.0, 14.96, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51916, 14.15, 0.0, 2.09, 72.74, 0.0, 10.88, 0.0, 0.0], 'true_label': 1.0}, {'point': [1.52369, 13.44, 0.0, 1.58, 72.22, 0.32, 12.24, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51613, 13.88, 1.78, 1.79, 73.1, 0.0, 8.67, 0.76, 0.0], 'true_label': 0.0}, {'point': [1.51623, 14.14, 0.0, 2.88, 72.61, 0.08, 9.18, 1.06, 0.0], 'true_label': 0.0}, {'point': [1.52065, 14.36, 0.0, 2.02, 73.42, 0.0, 8.44, 1.64, 0.0], 'true_label': 0.0}, {'point': [1.51658, 14.8, 0.0, 1.99, 73.11, 0.0, 8.28, 1.71, 0.0], 'true_label': 0.0}, {'point': [1.51316, 13.02, 0.0, 3.04, 70.48, 6.21, 6.96, 0.0, 0.0], 'true_label': 0.0}]
[ROD] Success, AUROC: 0.7800, AUPRC: 0.3000, Error Points: [{'point': [1.51755, 13.0, 3.6, 1.36, 72.99, 0.57, 8.4, 0.0, 0.11], 'true_label': 0.0}, {'point': [1.51727, 14.7, 0.0, 2.34, 73.28, 0.0, 8.95, 0.66, 0.0], 'true_label': 0.0}, {'point': [1.52152, 13.05, 3.65, 0.87, 72.22, 0.19, 9.85, 0.0, 0.17], 'true_label': 0.0}, {'point': [1.51602, 14.85, 0.0, 2.38, 73.28, 0.0, 8.76, 0.64, 0.09], 'true_label': 0.0}, {'point': [1.51708, 13.72, 3.68, 1.81, 72.06, 0.64, 7.88, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.52739, 11.02, 0.0, 0.75, 73.08, 0.0, 14.96, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51761, 12.81, 3.54, 1.23, 73.24, 0.58, 8.39, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51569, 13.24, 3.49, 1.47, 73.25, 0.38, 8.03, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.5159, 13.02, 3.58, 1.51, 73.12, 0.69, 7.96, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.5166, 12.99, 3.18, 1.23, 72.97, 0.58, 8.81, 0.0, 0.24], 'true_label': 0.0}, {'point': [1.52369, 13.44, 0.0, 1.58, 72.22, 0.32, 12.24, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51851, 13.2, 3.63, 1.07, 72.83, 0.57, 8.41, 0.09, 0.17], 'true_label': 0.0}, {'point': [1.51631, 13.34, 3.57, 1.57, 72.87, 0.61, 7.89, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51969, 12.64, 0.0, 1.65, 73.75, 0.38, 11.53, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51613, 13.88, 1.78, 1.79, 73.1, 0.0, 8.67, 0.76, 0.0], 'true_label': 0.0}, {'point': [1.51911, 13.9, 3.73, 1.18, 72.12, 0.06, 8.89, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.519, 13.49, 3.48, 1.35, 71.95, 0.55, 9.0, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51689, 12.67, 2.88, 1.71, 73.21, 0.73, 8.54, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51623, 14.14, 0.0, 2.88, 72.61, 0.08, 9.18, 1.06, 0.0], 'true_label': 0.0}, {'point': [1.52065, 14.36, 0.0, 2.02, 73.42, 0.0, 8.44, 1.64, 0.0], 'true_label': 0.0}, {'point': [1.51545, 14.14, 0.0, 2.68, 73.39, 0.08, 9.07, 0.61, 0.05], 'true_label': 0.0}, {'point': [1.5167, 13.24, 3.57, 1.38, 72.7, 0.56, 8.44, 0.0, 0.1], 'true_label': 0.0}, {'point': [1.5241, 13.83, 2.9, 1.17, 71.15, 0.08, 10.79, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51768, 12.65, 3.56, 1.3, 73.08, 0.61, 8.69, 0.0, 0.14], 'true_label': 0.0}, {'point': [1.51764, 12.98, 3.54, 1.21, 73.0, 0.65, 8.53, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.52119, 12.97, 0.33, 1.51, 73.39, 0.13, 11.27, 0.0, 0.28], 'true_label': 0.0}, {'point': [1.51784, 12.68, 3.67, 1.16, 73.11, 0.61, 8.7, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51769, 12.45, 2.71, 1.29, 73.7, 0.56, 9.06, 0.0, 0.24], 'true_label': 0.0}, {'point': [1.51674, 12.79, 3.52, 1.54, 73.36, 0.66, 7.9, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51776, 13.53, 3.41, 1.52, 72.04, 0.58, 8.79, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.5159, 13.24, 3.34, 1.47, 73.1, 0.39, 8.22, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.523, 13.31, 3.58, 0.82, 71.99, 0.12, 10.17, 0.0, 0.03], 'true_label': 0.0}, {'point': [1.51658, 14.8, 0.0, 1.99, 73.11, 0.0, 8.28, 1.71, 0.0], 'true_label': 0.0}, {'point': [1.51316, 13.02, 0.0, 3.04, 70.48, 6.21, 6.96, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51779, 13.64, 3.65, 0.65, 73.0, 0.06, 8.93, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51743, 12.2, 3.25, 1.16, 73.55, 0.62, 8.9, 0.0, 0.24], 'true_label': 0.0}, {'point': [1.51409, 14.25, 3.09, 2.08, 72.28, 1.1, 7.08, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.5173, 12.35, 2.72, 1.63, 72.87, 0.7, 9.23, 0.0, 0.0], 'true_label': 0.0}, {'point': [1.51508, 15.15, 0.0, 2.25, 73.5, 0.0, 8.34, 0.63, 0.0], 'true_label': 0.0}, {'point': [1.51905, 13.6, 3.62, 1.11, 72.64, 0.14, 8.76, 0.0, 0.0], 'true_label': 0.0}]
michaelx@MichaelXs-MBP OpenAD % 