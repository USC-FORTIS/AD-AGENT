AdONE
class pygod.detector.AdONE(hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=None, w1=0.2, w2=0.2, w3=0.2, w4=0.2, w5=0.2, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, save_emb=False, compile_model=False, verbose=0, **kwargs)[source]
Bases: DeepDetector

Adversarial Outlier Aware Attributed Network Embedding

AdONE consists of an attribute autoencoder and a structure autoencoder. It estimates five loss to optimize the model, including an attribute proximity loss, an attribute homophily loss, a structure proximity loss, a structure homophily loss, and an alignment loss. It calculates three outlier scores, and averages them as an overall score.

Note

This detector is transductive only. Using predict with unseen data will train the detector from scratch.

See [BVM20] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. A half (floor) of the layers are for the encoder, the other half (ceil) of the layers are for decoders. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of AdONE is fixed to be MLP. Changing of this parameter will not affect the model. Default: None.

w1 (float, optional) – Weight of structure proximity loss. Default: 0.2.

w2 (float, optional) – Weight of structure homophily loss. Default: 0.2.

w3 (float, optional) – Weight of attribute proximity loss. Default: 0.2.

w4 (float, optional) – Weight of attribute homophily loss. Default: 0.2.

w5 (float, optional) – Weight of alignment loss. Default: 0.2.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone model.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

attribute_score_
Attribute outlier score.

Type:
torch.Tensor

structural_score_
Structural outlier score.

Type:
torch.Tensor

combined_score_
Combined outlier score.

Type:
torch.Tensor

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

ANOMALOUS
class pygod.detector.ANOMALOUS(gamma=1.0, weight_decay=0.0, lr=0.004, epoch=100, gpu=-1, contamination=0.1, verbose=0)[source]
Bases: Detector

A Joint Modeling Approach for Anomaly Detection on Attributed Networks

ANOMALOUS is an anomaly detector with CUR decomposition and residual analysis.

Note

This detector is transductive only. Using predict with unseen data will train the detector from scratch.

See [PLL+18] for details.

Parameters:
gamma (float, optional) – Weight of node feature w.r.t. structure. Default: 1.

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

contamination (float, optional) – Valid in (0., 0.5). The proportion of outliers in the data set. Used when fitting to define the threshold on the decision function. Default: 0.1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

fit(data, label=None)[source]
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

AnomalyDAE
class pygod.detector.AnomalyDAE(emb_dim=64, hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=None, alpha=0.5, theta=1.0, eta=1.0, contamination=0.1, lr=0.004, epoch=5, gpu=-1, batch_size=0, num_neigh=-1, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Dual Autoencoder for Anomaly Detection on Attributed Networks

AnomalyDAE is an anomaly detector that consists of a structure autoencoder and an attribute autoencoder to learn both node embedding and attribute embedding jointly in latent space. The structural autoencoder uses Graph Attention layers. The reconstruction mean square error of the decoders are defined as structure anomaly score and attribute anomaly score, respectively, with two additional penalties on the reconstructed adj matrix and node attributes (force entries to be nonzero).

See [FZL20] for details.

Parameters:
emb_dim (int, optional) – Embedding dimension of model. Default: 64.

hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers of AnomalyDAE is fixed to be 4. Changing of this parameter will not affect the model. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of AnomalyDAE is fixed. Changing of this parameter will not affect the model. Default: None.

alpha (float, optional) – Weight between reconstruction of node feature and structure. Default: 0.5.

theta (float, optional) – The additional penalty for nonzero attribute. Default: 1..

eta (float, optional) – The additional penalty for nonzero structure. Default: 1..

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone model.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

CARD
class pygod.detector.CARD(hid_dim=64, num_layers=2, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, subgraph_num_neigh=4, fp=0.6, gama=0.5, alpha=0.1, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Community-Guided Contrastive Learning with Anomaly-Aware Reconstruction for Anomaly Detection on Attributed Networks.

CARD is a contrastive learning based method and utilizes mask reconstruction and community information to make anomalies more distinct. This model is train with contrastive loss and local and global attribute reconstruction loss. Random neighbor sampling instead of random walk sampling is used to sample the subgraph corresponding to each node. Since random neighbor sampling cannot accurately control the number of neighbors for each sampling, it may run slower compared to the method implementation in the original paper.

See:cite:Wang2024Card for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. Default: 2.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of the deep detector implemented in PyG. Default: torch_geometric.nn.GCN.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

subgraph_num_neigh (int, optional) – Number of neighbors in subgraph sampling for each node, Values not exceeding 4 are recommended for efficiency. Default: 4.

fp (float, optional) – The balance parameter between the mask autoencoder module and contrastive learning. Default: 0.6

gama (float, optional) – The proportion of the local reconstruction in contrastive learning module. Default: 0.5

alpha (float, optional) – The proprotion of the community embedding in the conbine_encoder. Default: 0.1

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

CoLA
class pygod.detector.CoLA(hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Anomaly Detection on Attributed Networks via Contrastive Self-Supervised Learning

CoLA is a contrastive self-supervised learning based method for graph anomaly detection. This implementation is base on random neighbor sampling instead of random walk sampling in the original paper.

See [LLP+21] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of the deep detector implemented in PyG. Default: torch_geometric.nn.GCN.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

CONAD
class pygod.detector.CONAD(hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, sigmoid_s=False, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, weight=0.5, eta=0.5, margin=0.5, r=0.2, m=50, k=50, f=10, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Contrastive Attributed Network Anomaly Detection

CONAD is an anomaly detector consisting of a shared graph convolutional encoder, a structure reconstruction decoder, and an attribute reconstruction decoder. The model is trained with both contrastive loss and structure/attribute reconstruction loss. The reconstruction mean square error of the decoders are defined as structure anomaly score and attribute anomaly score, respectively.

See [XHZ+22] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

sigmoid_s (bool, optional) – Whether to use sigmoid function to scale the reconstructed structure. Default: False.

backbone (torch.nn.Module, optional) – The backbone of the deep detector implemented in PyG. Default: torch_geometric.nn.GCN.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

weight (float, optional) – Weight between reconstruction of node feature and structure. Default: 0.5.

eta (float, optional) – Weight between contrastive and reconstruction.Default: 0.5.

margin (float, optional) – Margin in margin ranking loss. Default: 0.5.

r (float, optional) – The rate of augmented anomalies. Default: 0.2.

m (int, optional) – For densely connected nodes, the number of edges to add. Default: 50.

k (int, optional) – Same as k in pygod.generator.gen_contextual_outlier. Default: 50.

f (int, optional) – For disproportionate nodes, the scale factor applied on their attribute value. Default: 10.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs (optional) – Additional arguments for the backbone.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

DMGD
class pygod.detector.DMGD(hid_dim=64, num_layers=2, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, alpha=1, beta=1, gamma=1, warmup=2, k=2, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Deep Multiclass Graph Description

DMGD is a support vector based multiclass outlier detector. Its backbone is an autoencoder that reconstructs the adjacency matrix of the graph with MSE loss and homophily loss. It applies k-means to cluster the nodes embedding and then uses support vector to detect outliers.

See [BVVM20] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. Default: 2.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of the deep detector implemented in PyG. Default: torch_geometric.nn.GCN.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

alpha (float, optional) – Weight of the radius loss. Default: 1.

beta (float, optional) – Weight of the reconstruction loss. Default: 1.

gamma (float, optional) – Weight of the homophily loss. Default: 1.

warmup (int, optional) – The number of epochs for warm-up training. Default: 2.

k (int, optional) – The number of clusters. Default: 2.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone model.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

DOMINANT
class pygod.detector.DOMINANT(hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, sigmoid_s=False, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, weight=0.5, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Deep Anomaly Detection on Attributed Networks

DOMINANT is an anomaly detector consisting of a shared graph convolutional encoder, a structure reconstruction decoder, and an attribute reconstruction decoder. The reconstruction mean squared error of the decoders are defined as structure anomaly score and attribute anomaly score, respectively.

See [DLBL19] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. A half (floor) of the layers are for the encoder, the other half (ceil) of the layers are for decoders. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

sigmoid_s (bool, optional) – Whether to use sigmoid function to scale the reconstructed structure. Default: False.

backbone (torch.nn.Module, optional) – The backbone of the deep detector implemented in PyG. Default: torch_geometric.nn.GCN.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

weight (float, optional) – Weight between reconstruction of node feature and structure. Default: 0.5.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs (optional) – Additional arguments for the backbone.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

DONE
class pygod.detector.DONE(hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=None, w1=0.2, w2=0.2, w3=0.2, w4=0.2, w5=0.2, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Deep Outlier Aware Attributed Network Embedding

DONE consists of an attribute autoencoder and a structure autoencoder. It estimates five losses to optimize the model, including an attribute proximity loss, an attribute homophily loss, a structure proximity loss, a structure homophily loss, and a combination loss. It calculates three outlier scores, and averages them as an overall scores.

Note

This detector is transductive only. Using predict with unseen data will train the detector from scratch.

See [BVM20] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. A half (floor) of the layers are for the encoder, the other half (ceil) of the layers are for decoders. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of DONE is fixed to be MLP. Changing of this parameter will not affect the model. Default: None.

w1 (float, optional) – Weight of structure proximity loss. Default: 0.2.

w2 (float, optional) – Weight of structure homophily loss. Default: 0.2.

w3 (float, optional) – Weight of attribute proximity loss. Default: 0.2.

w4 (float, optional) – Weight of attribute homophily loss. Default: 0.2.

w5 (float, optional) – Weight of combination loss. Default: 0.2.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone model.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

attribute_score_
Attribute outlier score.

Type:
torch.Tensor

structural_score_
Structural outlier score.

Type:
torch.Tensor

combined_score_
Combined outlier score.

Type:
torch.Tensor

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

GAAN
class pygod.detector.GAAN(noise_dim=16, hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=None, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, weight=0.5, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Generative Adversarial Attributed Network Anomaly Detection

GAAN is a generative adversarial attribute network anomaly detection framework, including a generator module, an encoder module, a discriminator module, and uses anomaly evaluation measures that consider sample reconstruction error and real sample recognition confidence to make predictions. This model is transductive only.

See [CLW+20] for details.

Parameters:
noise_dim (int, optional) – Input dimension of the Gaussian random noise. Defaults: 16.

hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. A half (floor) of the layers are for the generator, the other half (ceil) of the layers are for encoder. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of GAAN is fixed to be MLP. Changing of this parameter will not affect the model. Default: None.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

weight (float, optional) – Weight between reconstruction of node feature and structure. Default: 0.5.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

GADNR
class pygod.detector.GADNR(hid_dim=64, num_layers=1, deg_dec_layers=4, fea_dec_layers=3, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, sample_size=2, sample_time=3, neigh_loss='KL', lambda_loss1=0.01, lambda_loss2=0.1, lambda_loss3=0.8, real_loss=True, lr=0.01, epoch=100, dropout=0.0, weight_decay=0.0003, act=<function relu>, gpu=-1, batch_size=0, num_neigh=-1, contamination=0.1, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Graph Anomaly Detection via Neighborhood Reconstruction

GAD-NR is a new type of GAE based on neighborhood reconstruction for graph anomaly detection. GAD-NR aims to reconstruct the entire neighborhood (including local structure, self attributes, and neighbors attributes) around a node based on the corresponding node representation.

See [RSL+24] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in the backbone encoder model. Default: 1.

deg_dec_layers (int, optional) – The number of layers for the node degree decoder. Default: 4.

fea_dec_layers (int, optional) – The number of layers for the node feature decoder. Default: 3.

backbone (torch.nn.Module, optional) – The backbone of the deep detector implemented in PyG. Default: torch_geometric.nn.GCN.

sample_size (int, optional) – The number of samples for the neighborhood distribution. Default: 2.

sample_time (int, optional) – The number sample times to remove the noise during node feature and neighborhood distribution reconstruction. Default: 3.

neigh_loss (str, optional) – The neighbor reconstruction loss. KL represents the KL divergence loss, W2 represents the W2 loss. Default: KL.

lambda_loss1 (float, optional) – The weight of the neighborhood reconstruction loss term. Default: 1e-2.

lambda_loss2 (float, optional) – The weight of the node feature reconstruction loss term. Default: 1e-3.

lambda_loss3 (float, optional) – The weight of the node degree reconstruction loss term. Default: 1e-4.

real_loss (bool, optional) – Whether using the original loss proposed in the paper as the decision score, if not, using the proposed weighted decision score. Default: True.

lr (float, optional) – Learning rate. Default: 0.01.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0.0003.

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs (optional) – Other parameters for the backbone.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None, h_loss_weight=1.0, degree_loss_weight=0.0, feature_loss_weight=2.5, loss_step=20)[source]
Overwrite the base model fit function since GAD-NR uses multiple personalized loss functions.

Parameters:
data (torch_geometric.data.Data) – Input graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

h_loss_weight (float, optional) – The weight of the neighborhood reconstruction loss term used in the weighted decision score. Default: 1.0.

degree_loss_weight (float, optional) – The weight of the node degree reconstruction loss term used in the weighted decision score. Default: 0..

feature_loss_weight (float, optional) – The weight of the node feature reconstruction loss term used in the weighted decision score. Default: 2.5.

loss_step (int, optional) – The epoch interval to update the loss terms. Default: 20.

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

GAE
class pygod.detector.GAE(hid_dim=64, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, recon_s=False, sigmoid_s=False, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, verbose=False, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Graph Autoencoder

See [KW16] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module, optional) – The backbone of the deep detector implemented in PyG. Default: torch_geometric.nn.GCN.

recon_s (bool, optional) – Reconstruct the structure instead of node feature . Default: False.

sigmoid_s (bool, optional) – Whether to use sigmoid function to scale the reconstructed structure. Default: False.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs (optional) – Other parameters for the backbone.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

GUIDE
class pygod.detector.GUIDE(hid_a=64, hid_s=4, num_layers=4, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=None, alpha=0.5, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, graphlet_size=4, selected_motif=True, cache_dir=None, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

Higher-order Structure based Anomaly Detection on Attributed Networks

GUIDE is an anomaly detector consisting of an attribute graph convolutional autoencoder, and a structure graph attentive autoencoder (not the same as the graph attention networks). Instead of the adjacency matrix, node motif degree is used as input of structure autoencoder. The reconstruction mean square error of the autoencoders are defined as structure anomaly score and attribute anomaly score, respectively.

Note: The calculation of node motif degree in preprocessing has high time complexity. It may take longer than you expect.

See [YZY+21] for details.

Parameters:
hid_a (int, optional) – Hidden dimension for attribute. Default: 64.

hid_s (int, optional) – Hidden dimension for structure. Default: 4.

num_layers (int, optional) – Total number of layers in model. Default: 4.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of GUIDE is fixed. Changing of this parameter will not affect the model. Default: None.

alpha (float, optional) – Weight between reconstruction of node feature and structure. Default: 0.5.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

graphlet_size (int, optional) – The maximum size of graphlet. Default: 4.

selected_motif (bool, optional) – Whether to use selected motif in the paper. Default: True.

cache_dir (str, optional) – The directory for the node motif degree caching. If None, ~/.pygod will be used. Default: None.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.


OCGNN
class pygod.detector.OCGNN(hid_dim=64, num_layers=2, dropout=0.0, weight_decay=0.0, act=<function relu>, backbone=<class 'torch_geometric.nn.models.basic_gnn.GCN'>, contamination=0.1, lr=0.004, epoch=100, gpu=-1, batch_size=0, num_neigh=-1, beta=0.5, warmup=2, eps=0.001, verbose=0, save_emb=False, compile_model=False, **kwargs)[source]
Bases: DeepDetector

One-Class Graph Neural Networks for Anomaly Detection in Attributed Networks

OCGNN is an anomaly detector that measures the distance of anomaly to the centroid, in a similar fashion to the support vector machine, but in the embedding space after feeding towards several layers of GCN.

See [WJD+21] for details.

Parameters:
hid_dim (int, optional) – Hidden dimension of model. Default: 64.

num_layers (int, optional) – Total number of layers in model. Default: 2.

dropout (float, optional) – Dropout rate. Default: 0..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

act (callable activation function or None, optional) – Activation function if not None. Default: torch.nn.functional.relu.

backbone (torch.nn.Module) – The backbone of the deep detector implemented in PyG. Default: torch_geometric.nn.GCN.

contamination (float, optional) – The amount of contamination of the dataset in (0., 0.5], i.e., the proportion of outliers in the dataset. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

batch_size (int, optional) – Minibatch size, 0 for full batch training. Default: 0.

num_neigh (int, optional) – Number of neighbors in sampling, -1 for all neighbors. Default: -1.

beta (float, optional) – The weight between the reconstruction loss and radius. Default: 0.5.

warmup (int, optional) – The number of epochs for warm-up training. Default: 2.

eps (float, optional) – The slack variable. Default: 0.001.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

save_emb (bool, optional) – Whether to save the embedding. Default: False.

compile_model (bool, optional) – Whether to compile the model with torch_geometric.compile. Default: False.

**kwargs – Other parameters for the backbone model.

decision_score_
The outlier scores of the training data. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

emb
The learned node hidden embeddings of shape 
 hid_dim. Only available when save_emb is True. When the detector has not been fitted, emb is None. When the detector has multiple embeddings, emb is a tuple of torch.Tensor.

Type:
torch.Tensor or tuple of torch.Tensor or None

fit(data, label=None)
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False, return_emb=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

return_emb (bool, optional) – Whether to return the learned node representations. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.
ONE
class pygod.detector.ONE(hid_a=36, hid_s=36, alpha=1.0, beta=1.0, gamma=1.0, weight_decay=0.0, contamination=0.1, lr=0.004, epoch=5, gpu=-1, verbose=0)[source]
Bases: Detector

Outlier Aware Network Embedding for Attributed Networks

Note

This detector is transductive only. Using predict with unseen data will train the detector from scratch.

See [BLM19] for details.

Parameters:
hid_a (int, optional) – Hidden dimension for the attribute. Default: 36.

hid_s (int, optional) – Hidden dimension for the structure. Default: 36.

alpha (float, optional) – Weight for the attribute loss. Default: 1..

beta (float, optional) – Weight for the structural loss. Default: 1..

gamma (float, optional) – Weight for the combined loss. Default: 1..

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

contamination (float, optional) – Valid in (0., 0.5). The proportion of outliers in the data set. Used when fitting to define the threshold on the decision function. Default: 0.1.

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 5.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

fit(data, label=None)[source]
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

Radar
class pygod.detector.Radar(gamma=1.0, weight_decay=0.0, lr=0.004, epoch=100, gpu=-1, contamination=0.1, verbose=0)[source]
Bases: Detector

Residual Analysis for Anomaly Detection in Attributed Networks

Radar is an anomaly detector with residual analysis.

Note

This detector is transductive only. Using predict with unseen data will train the detector from scratch.

See [LDHL17] for details.

Parameters:
gamma (float, optional) – Weight of node feature w.r.t. structure. Default: 1.

weight_decay (float, optional) – Weight decay (L2 penalty). Default: 0..

lr (float, optional) – Learning rate. Default: 0.004.

epoch (int, optional) – Maximum number of training epoch. Default: 100.

gpu (int) – GPU Index, -1 for using CPU. Default: -1.

contamination (float, optional) – Valid in (0., 0.5). The proportion of outliers in the data set. Used when fitting to define the threshold on the decision function. Default: 0.1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

fit(data, label=None)[source]
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.

SCAN
class pygod.detector.SCAN(eps=0.5, mu=2, contamination=0.1, verbose=0)[source]
Bases: Detector

Structural Clustering Algorithm for Networks

SCAN is a clustering algorithm, which only takes the graph structure without the node features as the input. Note: This model will output detected clusters instead of “outliers” descibed in the original paper.

Note

This detector is transductive only. Using predict with unseen data will train the detector from scratch.

See [XYFS07] for details.

Parameters:
eps (float, optional) – Neighborhood threshold. Default: .5.

mu (int, optional) – Minimal size of clusters. Default: 2.

contamination (float, optional) – Valid in (0., 0.5). The proportion of outliers in the data set. Used when fitting to define the threshold on the decision function. Default: 0.1.

verbose (int, optional) – Verbosity mode. Range in [0, 3]. Larger value for printing out more log information. Default: 0.

decision_score_
The outlier scores of the training data. The higher, the more abnormal. Outliers tend to have higher scores. This value is available once the detector is fitted.

Type:
torch.Tensor

threshold_
The threshold is based on contamination. It is the 
 contamination most abnormal samples in decision_score_. The threshold is calculated for generating binary outlier labels.

Type:
float

label_
The binary labels of the training data. 0 stands for inliers and 1 for outliers. It is generated by applying threshold_ on decision_score_.

Type:
torch.Tensor

hub_score_
The binary hub scores of each node.

Type:
torch.Tensor

scatter_score_
The binary scatter scores of each node, i.e., the “outlier” scores in the original paper.

Type:
torch.Tensor

fit(data, label=None)[source]
Fit detector with training data.

Parameters:
data (torch_geometric.data.Data) – The training graph.

label (torch.Tensor, optional) – The optional outlier ground truth labels used to monitor the training progress. They are not used to optimize the unsupervised model. Default: None.

Returns:
self – Fitted detector.

Return type:
object

predict(data=None, label=None, return_pred=True, return_score=False, return_prob=False, prob_method='linear', return_conf=False)
Prediction for testing data using the fitted detector. Return predicted labels by default.

Parameters:
data (torch_geometric.data.Data, optional) – The testing graph. If None, the training data is used. Default: None.

label (torch.Tensor, optional) – The optional outlier ground truth labels used for testing. Default: None.

return_pred (bool, optional) – Whether to return the predicted binary labels. The labels are determined by the outlier contamination on the raw outlier scores. Default: True.

return_score (bool, optional) – Whether to return the raw outlier scores. Default: False.

return_prob (bool, optional) – Whether to return the outlier probabilities. Default: False.

prob_method (str, optional) –

The method to convert the outlier scores to probabilities. Two approaches are possible:

1. 'linear': simply use min-max conversion to linearly transform the outlier scores into the range of [0,1]. The model must be fitted first.

2. 'unify': use unifying scores, see [KKSZ11].

Default: 'linear'.

return_conf (boolean, optional) – Whether to return the model’s confidence in making the same prediction under slightly different training sets. See [PVD20]. Default: False.

Returns:
pred (torch.Tensor) – The predicted binary outlier labels of shape 
. 0 stands for inliers and 1 for outliers. Only available when return_label=True.

score (torch.Tensor) – The raw outlier scores of shape 
. Only available when return_score=True.

prob (torch.Tensor) – The outlier probabilities of shape 
. Only available when return_prob=True.

conf (torch.Tensor) – The prediction confidence of shape 
. Only available when return_conf=True.